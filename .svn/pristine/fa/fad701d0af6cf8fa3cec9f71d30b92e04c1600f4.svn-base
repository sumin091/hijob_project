package kr.happyjob.study.myprmg.controller;

import java.io.File;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.common.comnUtils.ComnCodUtil;
import kr.happyjob.study.dashboard.model.DashboardModel;
import kr.happyjob.study.myprmg.dto.MypRmgDto;
import kr.happyjob.study.myprmg.service.MypRmgService;

@Controller
public class MypRmgController {
	
	  @Autowired
	  MypRmgService mypRmgService;

	// Set logger
	private final Logger logger = LogManager.getLogger(this.getClass());

	// Get class name for logger
	private final String className = this.getClass().toString();


//  기업 - 공고 전체 조회 - 기업 공고 화면
	@RequestMapping("/recerc/employee.do")
	 public String adverlist(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session) throws Exception {

		 logger.info("+ Start " + className + ".adverlist");
         logger.info("   - paramMap : " + paramMap);
	    	      
	      // 화면을 보고있는 사람의 정보 담기
	      paramMap.put("loginID", session.getAttribute("loginId")); 
	      paramMap.put("name", session.getAttribute("userNm"));
	      paramMap.put("user_businesstype", session.getAttribute("user_businesstype"));
	      paramMap.put("user_type", session.getAttribute("userType"));
	      paramMap.put("user_coname", session.getAttribute("user_coname"));
         
         List<MypRmgDto> adverlist = mypRmgService.adverlist(paramMap);
         
         for(MypRmgDto item : adverlist) {
        	 Map<String, Object> skillMap = new HashMap<String, Object>();
        	 skillMap.put("corecruit_no",item.getCorecruit_no());
        	 
        	 List<MypRmgDto> skillist = mypRmgService.skillist(skillMap);
        	 item.setSkillist(skillist);
         }
         
	      model.addAttribute("adverlist", adverlist);
	      model.addAttribute("user_type", session.getAttribute("userType"));
	      
	      logger.info("+ End " + className + ".adverlist");

	      return "recerc/employeelist";
	   }   
	

//  기업 - 공고 한건 조회
	@RequestMapping("/myprmg/adverselectone.do")
	 public String adverselectone(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session) throws Exception {

		 logger.info("+ Start " + className + ".adverselectone");
         logger.info("   - paramMap : " + paramMap);
	    	      
	      // 화면을 보고있는 사람의 정보 담기
	      paramMap.put("loginID", session.getAttribute("loginId")); 
	      paramMap.put("name", session.getAttribute("userNm"));
	      paramMap.put("user_businesstype", session.getAttribute("user_businesstype"));
	      paramMap.put("user_type", session.getAttribute("userType"));
	      paramMap.put("user_coname", session.getAttribute("user_coname"));
         
       /*  int maxcorecruit = mypRmgService.maxcorecruit(paramMap); 
         
         paramMap.put("corecruit_no", maxcorecruit);*/
         
	      MypRmgDto adverselectone = mypRmgService.adverselectone(paramMap); 
	      
	      List<MypRmgDto> skillist = mypRmgService.skillist(paramMap);
	      
	      model.addAttribute("adverselectone", adverselectone);
	      model.addAttribute("skillist", skillist);
	      model.addAttribute("loginID", session.getAttribute("loginId"));
	      
	      logger.info("+ End " + className + ".adverselectone" + "loginID");
	      

	      return "myprmg/adverselectone";
	   }   


	//  기업 - 공고 작성 페이지
	@RequestMapping("/myprmg/adverwrite.do")
	public String adverwrite(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session) throws Exception {
		
		  logger.info("+ Start " + className + ".writerinfo");
		  logger.info("+ Start " + className + ".adverwrite");
		  
	      logger.info("   - paramMap : " + paramMap);    
	      
	      // 작성하는 기업 가입 정보 세션에 답기 (회사,회사 형태, 이름, 아이디)
	      paramMap.put("loginID", session.getAttribute("loginId")); 
	      paramMap.put("name", session.getAttribute("userNm"));
	      paramMap.put("user_businesstype", session.getAttribute("user_businesstype"));
	      paramMap.put("user_coname", session.getAttribute("user_coname"));

	      logger.info("   - paramMap2 : " + paramMap);
	      
	      // 작성하는 기업 가입 정보 가져오기 (회사,회사 형태, 이름, 아이디)
	      MypRmgDto writerinfo = mypRmgService.writerinfo(paramMap); 

	   // 작성하는 기업 가입 정보 model에 담음 (회사,회사 형태, 이름, 아이디)
	      model.addAttribute("writerinfo", writerinfo);
	      model.addAttribute("usertype", writerinfo);
	      
	      logger.info("+ End " + className + ".adverselectone");
	      
	      return "myprmg/adverwrite";
	}
	

	//  기업 - 공고 작성 저장
	@RequestMapping("/myprmg/adversave.do")
	@ResponseBody
	public Map<String, Object> adversave(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			   HttpServletResponse response, HttpSession session) throws Exception {
	      
	      logger.info("+ Start " + className + ".adversave");
	      logger.info("   - paramMap : " + paramMap);
	      
	      paramMap.put("loginID", (String) session.getAttribute("loginId"));

	      Map<String, Object> returnmap = new HashMap<String, Object>();
	      
	      int  returncval = mypRmgService.adversave(paramMap); 

	      returnmap.put("returncval", returncval);
	      
	      logger.info("+ End " + className + ".adversave");
	      logger.info("+ End " + className + ".skillist");

	       return returnmap;
	   }    

	  @RequestMapping("adversavefile.do")
	  @ResponseBody
	   public Map<String, Object> adversavefile(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
	         HttpServletResponse response, HttpSession session) throws Exception {
	      
	      logger.info("+ Start " + className + ".adversavefile");
	      logger.info("   - paramMap : " + paramMap);
	      
	      String action = (String) paramMap.get("action");
	      
	      paramMap.put("loginID", (String) session.getAttribute("loginId"));
	      
	      int returncval = 0;
	      
	      if("I".equals(action)) {
	    	  returncval = mypRmgService.adversavefile(paramMap,request);
	      } else if("U".equals(action)) {
	    	  returncval = mypRmgService.adverupdatefile(paramMap,request);
	      } else if("D".equals(action)) {
	    	  returncval = mypRmgService.adverdeletefile(paramMap);
	      }      
	      
	      Map<String, Object> returnmap = new HashMap<String, Object>();
	      
	      returnmap.put("returncval", returncval);
	      
	      logger.info("+ End " + className + ".adversavefile");

	      return returnmap;
	   }

}

