package kr.happyjob.study.myprmg.service;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.happyjob.study.common.comnUtils.FileUtilCho;
import kr.happyjob.study.dashboard.model.DashboardModel;
import kr.happyjob.study.myprmg.dao.MypRmgDao;
import kr.happyjob.study.myprmg.dto.MypRmgDto;


@Service
public class MypRmgServiceImpl implements MypRmgService {

   // Set logger
   private final Logger logger = LogManager.getLogger(this.getClass());
   
   // Get class name for logger
   private final String className = this.getClass().toString();
   
   @Autowired
   MypRmgDao mypRmgDao;
   
	@Value("${fileUpload.rootPath}")
	private String rootPath;    // W:\\FileRepository
	
	@Value("${fileUpload.virtualRootPath}")
	private String virtualrootPath;  // /serverfile
	
	@Value("${fileUpload.noticePath}")
	private String noticePath;   // notice
	
	/** 기업 - 리스트 조회 */
	public List<MypRmgDto> adverlist(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.adverlist(paramMap);
	}
		
	/** 기업 - 공고 한건 조회 */
	public MypRmgDto adverselectone(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.adverselectone(paramMap);
	}

	/** 공고 Max 번호 구하기 */
	public int maxcorecruit(Map<String, Object> paramMap) throws Exception{
		return mypRmgDao.maxcorecruit(paramMap);
	}
	
	/** 기업 - 공고 한건 조회 + 스킬 리스트 낱개로 가져오기*/
	public List<MypRmgDto> skillist(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.skillist(paramMap);
	}
	
	/** 기업 - 공고 작성 - 회사 & 작성자 정보 */
	public MypRmgDto writerinfo(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.writerinfo(paramMap);
	}
	
	/** 기업 - 공고 작성 */
	public int adversave(Map<String, Object> paramMap) throws Exception {
		
		mypRmgDao.adversave(paramMap);
		
		Map<String, Object> skillMap = new HashMap<String, Object>();
		
		String skillcd = (String) paramMap.get("dtlcombo1");
		if(skillcd != "" && skillcd != null) {   // if("".equals(skillcd))
			skillMap.put("dtlcodeCD", skillcd);
			
			mypRmgDao.adversaveskill(skillMap);
		}
		
		 skillcd = (String) paramMap.get("dtlcombo2");
		if(skillcd != "" && skillcd != null) {   // if("".equals(skillcd))
			skillMap.put("dtlcodeCD", skillcd);
			
			mypRmgDao.adversaveskill(skillMap);
		}
		
		 skillcd = (String) paramMap.get("dtlcombo3");
		if(skillcd != "" && skillcd != null) {   // if("".equals(skillcd))
			skillMap.put("dtlcodeCD", skillcd);
			
			mypRmgDao.adversaveskill(skillMap);
		}
		
		return 1;
	}
	
	/** 기업 - 공고 수정 */
	public int adverupdate(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.adverupdate(paramMap);
	}
	
	/** 기업 - 공고 삭제 */
	public int adverdelete(Map<String, Object> paramMap) throws Exception {
		return mypRmgDao.adverdelete(paramMap);
	}
	
	

	//** 기업 - 공고 파일 업로드 *//*
	public int adversavefile(Map<String, Object> paramMap, HttpServletRequest request) throws Exception{
		
		MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest) request;
		
		String noticedir = File.separator + noticePath + File.separator;
		
		FileUtilCho fileup = new FileUtilCho(multipartHttpServletRequest, rootPath, virtualrootPath, noticedir);
		
		Map filereturn = fileup.uploadFiles();

		String upfile = (String) filereturn.get("att_no");
		paramMap.put("fileprc", "Y");
		
		if(upfile == "" || upfile == null) {
			paramMap.put("fileexist", "N");
		} else {
			paramMap.put("filereturn", filereturn);
			paramMap.put("fileexist", "Y");
			
			mypRmgDao.fileinsert(paramMap);
		}
		
		

		return mypRmgDao.adversave(paramMap);
	}
	
	
	//** 기업 - 공고 파일 수정 *//*
	public int adverupdatefile(Map<String, Object> paramMap, HttpServletRequest request) throws Exception{
		
		MypRmgDto adverselectone = mypRmgDao.adverselectone(paramMap);
		
		if(adverselectone.getAtt_name() != "" && adverselectone.getAtt_name() != null) {
			File attfile = new File(adverselectone.getAtt_phypath());     
			attfile.delete();
			
			mypRmgDao.deletefileinfo(paramMap);
		} 

		MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest) request;
				
		String noticedir = File.separator + noticePath + File.separator;
		FileUtilCho fileup = new FileUtilCho(multipartHttpServletRequest, rootPath, virtualrootPath, noticedir);
		Map filereturn = fileup.uploadFiles();
				
		String upfile = (String) filereturn.get("att_no");
		paramMap.put("fileprc", "Y");
		
		if(upfile == "" || upfile == null) {
			paramMap.put("fileexist", "N");
		} else {
			paramMap.put("filereturn", filereturn);
			paramMap.put("fileexist", "Y");
			
			mypRmgDao.fileinsert(paramMap);
		}
			
		return mypRmgDao.adverupdatefile(paramMap);
	}
	

	
	/** 기업 - 공고 파일 삭제  **/
	public int adverdeletefile(Map<String, Object> paramMap) throws Exception{
		
		MypRmgDto adverselectone = mypRmgDao.adverselectone(paramMap);
		
		if(adverselectone.getAtt_name() != "" && adverselectone.getAtt_name() != null) {
			File attfile = new File(adverselectone.getAtt_phypath());     
			attfile.delete();
			
			mypRmgDao.deletefileinfo(paramMap);
		} 
		
		return mypRmgDao.adverdeletefile(paramMap);
	}
	
	
}